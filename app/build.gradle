apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.app.autonomoustesting"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias "androiddebugkey"
            keyPassword "android"
            storeFile file('config/debug.keystore')
            storePassword "android"
        }
        release {
            keyAlias "thai"
            keyPassword "123456789"
            storeFile file('config/thai.keystore')
            storePassword "123456789"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "String", "LOCATION_API_KEY", getLocationApiSecret()
            buildConfigField "String", "LOCATION_BASE_URL", "\"https://api.opencagedata.com/\""
            buildConfigField "String", "LOCATION_URL_VERSION", "\"geocode/v1/\""

            buildConfigField "String", "WEATHER_API_KEY", getWeatherApiSecret()
            buildConfigField "String", "WEATHER_BASE_URL", "\"https://api.openweathermap.org/\""
            buildConfigField "String", "WEATHER_URL_VERSION", "\"data/2.5/\""

            buildConfigField "String", "DATABASE_NAME", "\"autonomous_db\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        staging {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "String", "LOCATION_API_KEY", getLocationApiSecret()
            buildConfigField "String", "LOCATION_BASE_URL", "\"https://api.opencagedata.com/\""
            buildConfigField "String", "LOCATION_URL_VERSION", "\"geocode/v1/\""

            buildConfigField "String", "WEATHER_API_KEY", getWeatherApiSecret()
            buildConfigField "String", "WEATHER_BASE_URL", "\"https://api.openweathermap.org/\""
            buildConfigField "String", "WEATHER_URL_VERSION", "\"data/2.5/\""

            buildConfigField "String", "DATABASE_NAME", "\"autonomous_db\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            buildConfigField "String", "LOCATION_API_KEY", getLocationApiSecret()
            buildConfigField "String", "LOCATION_BASE_URL", "\"https://api.opencagedata.com/\""
            buildConfigField "String", "LOCATION_URL_VERSION", "\"geocode/v1/\""

            buildConfigField "String", "WEATHER_API_KEY", getWeatherApiSecret()
            buildConfigField "String", "WEATHER_BASE_URL", "\"https://api.openweathermap.org/\""
            buildConfigField "String", "WEATHER_URL_VERSION", "\"data/2.5/\""

            buildConfigField "String", "DATABASE_NAME", "\"autonomous_db\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"

    // Co-routines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // DI
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:2.7.1"
    implementation "com.squareup.retrofit2:converter-gson:2.7.1"
    implementation "com.squareup.okhttp3:logging-interceptor:4.2.2"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
}

Properties getLocalProperties() {
    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file("local.properties")
    if (localPropertiesFile.canRead()) {
        properties.load(localPropertiesFile.newDataInputStream())
    }
    return properties
}


String getLocationApiSecret() {
    return "\"" + getLocalProperties().getProperty("locationApiSecret") + "\""
}

String getWeatherApiSecret() {
    return "\"" + getLocalProperties().getProperty("weatherApiSecret") + "\""
}

